/*
 * Copyright (C) 2013, 2014 beamproject.org
 *
 * This file is part of beam-server.
 *
 * beam-server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * beam-server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.beamproject.server.carrier;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.http.HttpStatus;
import org.beamproject.common.crypto.CryptoPacker;
import org.beamproject.common.util.Base64;

/**
 * Allows to send byte arrays to recipients via HTTP and encoded using
 * {@link Base64}.
 */
public class HttpConnection {

    private final static String USER_AGENT = "Beam";
    private final static String ENCODING = "UTF-8";
    private final static String POST_KEY = "data";
    private HttpURLConnection connection;
    private URL recipient;
    private byte[] message;

    /**
     * Sends the given {@code message} to the given {@link URL}. It is expected
     * that the bytes were created with {@link CryptoPacker}. Otherwise, the
     * server might reject the request.<p>
     * The content is sent as value of the parameter named {@code value}
     * (therefore it's {@link Base64}ed and then {@link URLEncoder}ed). This is
     * automatically done, so the argument should be exactly the output
     * generated by {@link CryptoPacker}.
     *
     * @param recipient The {@link URL} of the target server.
     * @param message The data to send.
     * @throws IllegalArgumentException If at least one argument is null or
     * empty (zero length).
     * @throws CarrierException If a problem occurs during sending the message.
     */
    public void post(URL recipient, byte[] message) {
        verifyParameters(recipient, message);

        try {
            openConnection();
            sendRequest();
            handleResponseCode();
        } catch (IOException ex) {
            throw new CarrierException("An error occurred during sending to a "
                    + "HTTP server: " + ex.getMessage());
        }
    }

    private void verifyParameters(URL recipient, byte[] message) {
        this.recipient = recipient;
        this.message = message;

        if (recipient == null || message == null || message.length == 0) {
            throw new IllegalArgumentException("The argument may not be null nor"
                    + " may it be empty.");
        }
    }

    private void openConnection() throws IOException {
        connection = (HttpURLConnection) recipient.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setRequestProperty("Content-Length", "" + message.length);
        connection.setRequestProperty("User-Agent", USER_AGENT);
        connection.setDoInput(true);
        connection.setDoOutput(true);
    }

    private void sendRequest() throws IOException {
        try (DataOutputStream requestStream = new DataOutputStream(connection.getOutputStream())) {
            requestStream.writeBytes(POST_KEY + "=");
            requestStream.writeBytes(URLEncoder.encode(Base64.encode(message), ENCODING));
            requestStream.flush();
        }
    }

    private void handleResponseCode() throws IOException {
        if (connection.getResponseCode() != HttpStatus.SC_NO_CONTENT) {
            Logger.getLogger(HttpConnection.class.getName()).log(Level.INFO,
                    "The connection {0} returned the response code {1} instead "
                    + "of 204.", new Object[]{connection.toString(),
                        connection.getResponseCode()});
        }
    }

}
